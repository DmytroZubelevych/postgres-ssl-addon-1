type: update
jpsVersion: 6.1.1
name: SSL/TLS Encrypted Connection
id: postgres-ssl
targetEditions: any
logo: /images/postgres-ssl-logo.svg
description: Enforce DB Connection to use SSL/TLS. Certificate folder /var/lib/jelastic/keys/SSL-TLS
baseUrl: https://raw.githubusercontent.com/DmytroZubelevych/postgres-ssl-addon-1/main

targetNodes:
  nodeType:
    - postgresql
    - postgres11
    - postgres12
    - postgres13
    - postgres14
    - postgres15
    - pgpool2
    - pgpool2-4

globals:
  pgConfig: /var/lib/pgsql/data/postgresql.conf
  pgSslConfig: /var/lib/pgsql/data/pg_ssl.conf
  pgHbaConfig: /var/lib/pgsql/data/pg_hba.conf
  pgpoolConfig: /etc/pgpool-II/pgpool.conf
  certFolder: /var/lib/jelastic/keys/SSL-TLS
  keyPass: ${fn.password}

onInstall:
  - checkApplication
  - getMasterId
  - env.control.AddContainerEnvVars[${targetNodes.nodeGroup}]:
      vars: {"KEY_PASS":"${globals.keyPass}"}
  - cmd[${targetNodes.nodeGroup}]: |-
      mkdir -p ${globals.certFolder}/server/
      [ -f "${globals.pgSslConfig}" ] || wget -O ${globals.pgSslConfig} ${baseUrl}/scripts/pg_ssl.conf?_r=${fn.random};
      chown 700:700 ${globals.pgSslConfig};
      wget -O /usr/local/sbin/copyCert ${baseUrl}/scripts/copyCert?_r=${fn.random};
      chmod +x /usr/local/sbin/copyCert
    user: root
  - turnOnSSLForNodes:
      nodesToEnableSSL: ${globals.masterId}
  - if (nodes.${targetNodes.nodeGroup}.length > 1):
      - cmd[${globals.masterId}]: |-
          rm -rf ${globals.certFolder}/server/server.*
        user: root
      - cmd[${globals.masterId}]: copyCert getCert ${globals.certFolder}/server/root.crt
      - setGlobals:
          rootCaCert: ${response.out}
      - cmd[${globals.masterId}]: copyCert getCert ${globals.certFolder}/server/root.key
      - setGlobals:
          rootCaKey: ${response.out}
      - uploadCertsAndKeys:
          newNodes: ${targetNodes.nodeGroup}
      - cmd[${targetNodes.nodeGroup}]: |-
          chown 700:700 ${globals.certFolder}/*
        user: root
      - turnOnSSLForNodes:
          nodesToEnableSSL: ${targetNodes.nodeGroup}

onUninstall:
  - disableSSL

onAfterRedeployContainer[${targetNodes.nodeGroup}]:
  - if (!${event.params.useExistingVolumes:true}):
     - turnOnSSLForNodes:
         nodesToEnableSSL: ${targetNodes.nodeGroup}
  
onBeforeServiceScaleOut[${targetNodes.nodeGroup}]:
  - if ('${event.params.nodeGroup}'.indexOf('sqldb') > -1):
    - cmd[${targetNodes.nodeGroup}]: |-
        sed -ci -e 's/^[[:space:]]*ssl[[:space:]]*=[[:space:]]*on/ssl = off/' ${globals.pgConfig}
      
onAfterServiceScaleOut[${targetNodes.nodeGroup}]:
  - cmd[${targetNodes.nodeGroup}]: |-
      source /etc/jelastic/metainf.conf
      mkdir -p ${globals.certFolder}/server/
      wget -O /usr/local/sbin/copyCert ${baseUrl}/scripts/copyCert?_r=${fn.random};
      chmod +x /usr/local/sbin/copyCert
      grep -q  "${globals.certFolder}" /etc/jelastic/redeploy.conf || echo "${globals.certFolder}" >> /etc/jelastic/redeploy.conf
    user: root
  - getMasterId
  - cmd[${globals.masterId}]: copyCert getCert ${globals.certFolder}/server/root.crt
  - setGlobals:
      rootCaCert: ${response.out}
  - cmd[${globals.masterId}]: copyCert getCert ${globals.certFolder}/server/root.key
  - setGlobals:
      rootCaKey: ${response.out}
  - uploadCertsAndKeys:
      newNodes: ${event.response.nodes.join(id,)}
  - addCertsForNewNodes
  - if ('${event.params.nodeGroup}'.indexOf('sqldb') > -1):
    - cmd[${targetNodes.nodeGroup}]: |-
        sed -ci -e "s/^ssl = off/ssl = on/" ${globals.pgConfig}
  - fixCertOwnPerm
  - if ('${event.params.nodeGroup}'.indexOf('sqldb') > -1):
    - cmd[${targetNodes.nodeGroup}]: jem service restart

onAfterResetServicePassword[${targetNodes.nodeGroup}]:
  - if ('${event.params.nodeGroup}'.indexOf('sqldb') > -1):
    - if (nodes.pgpool):
      - getPswd
      - setWebadminPasswordOnPgPool

onAfterClone:
  - script: return {result:0, jps:MANIFEST};
  - install [${settings.nodeGroups}]:
      envName: ${event.response.env.envName}
      jps: ${response.jps}
      settings:
        nodeGroups: ${settings.nodeGroups}
        envName: ${settings.envName}

buttons:
  - confirmText: Do you want to reissue the SSL certificates and key (service restart needed)?
    loadingText: Reissuing the certificates...
    action: reGenerateCerts
    caption: Re-issue certificates
    successText: Certificates reissued successfully
  - loadingText: Opening...
    action: opendocs
    caption: Configuration Tutorial
    href: https://www.virtuozzo.com/application-platform-docs/ssl-for-pgsql/

actions:
  getMasterId:
    - forEach(nodes.${targetNodes.nodeGroup}):
      - cmd[${@i.id}]: |- 
          source /.jelenv;  
          echo ${MASTER_ID};
      - setGlobals:
          masterId: ${response.out}

  uploadCertsAndKeys:
    - cmd[${this.newNodes}]: |-
        copyCert uploadCert ${globals.certFolder}/root.key '${globals.rootCaKey}'
        copyCert uploadCert ${globals.certFolder}/root.crt '${globals.rootCaCert}'
      user: root

  reGenerateCerts:
    - cmd[${targetNodes.nodeGroup}]: rm -rf ${globals.certFolder}/*;
    - generateCerts:
        affectedNodes: ${targetNodes.nodeGroup}
    - cmd[${targetNodes.nodeGroup}]: jem service restart
    - fixCertOwnPerm

  checkApplication:
    - if ('${targetNodes.nodeGroup}'.indexOf('sqldb') > -1):
      - checkAppVersion:
          masternode: ${targetNodes.nodeGroup}
      - if (response.out == "Non-supported"):
        - stopEvent:
            type: warning
            message: Database version is not supported.

  generateCerts:
    - cmd[${this.affectedNodes}]: |-
        [ -f /usr/local/sbin/selfcertgen ] && rm -f /usr/local/sbin/selfcertgen;
        [ -f /usr/local/sbin/copyCert ] && rm -f /usr/local/sbin/copyCert;
        wget -O /usr/local/sbin/selfcertgen ${baseUrl}/scripts/selfcertgen?_r=${fn.random};
        wget -O /usr/local/sbin/copyCert ${baseUrl}/scripts/copyCert?_r=${fn.random};
        chmod +x /usr/local/sbin/selfcertgen /usr/local/sbin/copyCert
        selfcertgen webadmin ${env.domain} ${targetNodes.nodeGroup};
        chown -R 700:700 ${globals.certFolder} /usr/local/sbin/selfcertgen; chmod 600 ${globals.certFolder}/*
      user: root
    - cmd[${this.affectedNodes}]: |-
        rm -rf ${globals.certFolder}/client; mkdir -p ${globals.certFolder}/client;
        rm -rf ${globals.certFolder}/server; mkdir -p ${globals.certFolder}/server;
        chown -R postgres:postgres ${globals.certFolder}/*
        rm -f ${globals.certFolder}/client.csr
        for i in client.crt client.key
        do
            [ -f ${globals.certFolder}/${i} ] && mv -f ${globals.certFolder}/${i} ${globals.certFolder}/client/${i}
        done
        for i in root.crt root.key root.srl server.crt server.key
        do
            [ -f ${globals.certFolder}/${i} ] && mv -f ${globals.certFolder}/${i} ${globals.certFolder}/server/${i}
        done
        ln -sfT ${globals.certFolder}/server/root.crt ${globals.certFolder}/client/root.crt
      user: root
      
  getPswd:
    - if ('${targetNodes.nodeGroup}'.indexOf('sqldb') > -1):
      - getPostgresPasswd:
          masternode: ${targetNodes.nodeGroup}
      - setGlobals: 
          pswd: ${response.out}

  setWebadminPasswordOnPgPool:
    - if (nodes.pgpool):
      - cmd[pgpool]: |-
          [ -f ~/.pgpoolkey ] || echo 'defaultpgpoolkey' > ~/.pgpoolkey; chmod 600 ~/.pgpoolkey
          pg_enc -m -f /etc/pgpool-II/pgpool.conf -u webadmin ${globals.pswd}

  enableSSL:
    - if ('${targetNodes.nodeGroup}'.indexOf('sqldb') > -1):
      - getPswd
      - if (nodes.pgpool):
        - setWebadminPasswordOnPgPool
    - cmd[${this.affectedNodes}]: |-
        echo "${globals.certFolder}" >> /etc/jelastic/redeploy.conf
        source /etc/jelastic/metainf.conf
        if [ "x$COMPUTE_TYPE" == "xpostgres" ] ; then
            if ! grep -q 'scram-sha-256' /var/lib/jelastic/overrides/postgres-passwd.lib; then
                wget ${baseUrl}/scripts/postgres-passwd.lib -O /var/lib/jelastic/overrides/postgres-passwd.lib
                if [ -f /usr/local/sbin/jcm ]; then 
                    jem passwd set -p ${globals.pswd}
                else 
                    true
                fi
            fi
            [ -f "${globals.pgSslConfig}" ] || wget -O ${globals.pgSslConfig} ${baseUrl}/scripts/pg_ssl.conf?_r=${fn.random};
            echo "include '/var/lib/pgsql/data/pg_ssl.conf'" >> ${globals.pgConfig}
            chown 700:700 ${globals.pgSslConfig};
            for i in ssl ssl_ciphers ssl_cert_file ssl_ca_file ssl_key_file
            do
                sed -ci -e "s/^[[:space:]]*#[[:space:]]*${i}[[:space:]]*=/${i} =/" ${globals.pgSslConfig}
            done
            if grep -q '^ssl_cert_file' ${globals.pgSslConfig}; then 
                sed -ci -e "s|ssl_cert_file.*|ssl_cert_file = '${globals.certFolder}/server/server.crt'|" ${globals.pgSslConfig};
            else 
                echo "ssl_cert_file = '${globals.certFolder}/server/server.crt'" >> ${globals.pgSslConfig};
            fi
            if grep -q '^ssl_ca_file' ${globals.pgSslConfig}; then 
                sed -ci -e "s|ssl_ca_file.*|ssl_ca_file = '${globals.certFolder}/server/root.crt'|" ${globals.pgSslConfig};             
            else 
                echo "ssl_ca_file = '${globals.certFolder}/server/root.crt'" >> ${globals.pgSslConfig};
            fi
            if grep -q '^ssl_key_file' ${globals.pgSslConfig}; then
                sed -ci -e "s|ssl_key_file.*|ssl_key_file = '${globals.certFolder}/server/server.key'|" ${globals.pgSslConfig};
            else 
                echo "ssl_key_file = '${globals.certFolder}/server/server.key'" >> ${globals.pgSslConfig};
            fi
            for i in ssl ssl_prefer_server_cipher
            do
                sed -ci -e "s/^${i}[[:space:]]*=[[:space:]]*off/${i} = on/" ${globals.pgSslConfig} 
            done
            sed -ci -e "s/host[[:space:]]*all[[:space:]]*all[[:space:]]*0.0.0.0\/0[[:space:]]*\(md5\|scram-sha-256\)[[:space:]]*/hostssl    all    all    0.0.0.0\/0    scram-sha-256/" ${globals.pgHbaConfig}
        else
            sed -ci -e "s/^[[:space:]]*#[[:space:]]*ssl[[:space:]]*=.*/ssl = on/" ${globals.pgpoolConfig}
            sed -ci -e "s/^[[:space:]]*ssl[[:space:]]*=.*/ssl = on/" ${globals.pgpoolConfig}
            sed -ci -e "s/^[[:space:]]*#[[:space:]]*enable_pool_hba[[:space:]]*=.*/enable_pool_hba = on/" ${globals.pgpoolConfig}
            sed -ci -e "s/^[[:space:]]*enable_pool_hba[[:space:]]*=.*/enable_pool_hba = on/" ${globals.pgpoolConfig}
            sed -ci -e "s/^[[:space:]]*#[[:space:]]*pool_passwd[[:space:]]*=/pool_passwd  =/" ${globals.pgpoolConfig}
            sed -ci -e "s|^[[:space:]]*#[[:space:]]*ssl_key[[:space:]]*=.*|ssl_key = '/var/lib/jelastic/keys/server/server.key'|" ${globals.pgpoolConfig}
            sed -ci -e "s|^[[:space:]]*#[[:space:]]*ssl_cert[[:space:]]*=.*|ssl_cert = '/var/lib/jelastic/keys/server/server.crt'|" ${globals.pgpoolConfig}
            sed -ci -e "s/^[[:space:]]*host[[:space:]]*all[[:space:]]*all[[:space:]]*0.0.0.0\/0[[:space:]]*\(md5\|scram-sha-256\)[[:space:]]*/hostssl    all    all    0.0.0.0\/0    scram-sha-256/" /etc/pgpool-II/pool_hba.conf
        fi
        jem service restart
      user: root
  
  disableSSL:
    - cmd[${targetNodes.nodeGroup}]: |-
        jem service stop
        if [ -e ${globals.pgConfig} ]; then
            sed -ci -e 's/^[[:space:]]*ssl[[:space:]]*=[[:space:]]*on/ssl = off/' ${globals.pgSslConfig}
        fi
        if [ -e ${globals.pgHbaConfig} ]; then
            sed -ci -e "s|hostssl|host|" ${globals.pgHbaConfig}
        fi
        if [ -e ${globals.pgpoolConfig} ]; then
            sed -ci -e "s/^[[:space:]]*ssl[[:space:]]*=.*/ssl = off/" ${globals.pgpoolConfig}
            sed -ci -e "s/^[[:space:]]*enable_pool_hba[[:space:]]*=.*/enable_pool_hba = off/" ${globals.pgpoolConfig}
            sed -ci -e "s/^[[:space:]]*pool_passwd[[:space:]]*=/#pool_passwd  =/" ${globals.pgpoolConfig}
            sed -ci -e "s|^[[:space:]]*ssl_key[[:space:]]*=|#ssl_key =|" ${globals.pgpoolConfig}
            sed -ci -e "s|^[[:space:]]*ssl_cert[[:space:]]*=|#ssl_cert =|" ${globals.pgpoolConfig}
            sed -ci -e "s|hostssl|host|" ${globals.pgpoolConfig}
        fi
        for i in client.crt client.key root.crt
        do
            rm -f ${globals.certFolder}/client/${i}
        done
        for i in root.crt root.srl server.crt server.key
        do
            rm -f ${globals.certFolder}/server/${i}
        done
        sed -ci -e '/\/var\/lib\/jelastic\/keys\/SSL-TLS/d' /etc/jelastic/redeploy.conf
        for i in client server
        do
            if [ -z "$(ls -A ${globals.certFolder}/${i})" ]; then
                rm -rf ${globals.certFolder}/${i}
            fi
        done
        jem service start
      user: root

  addCertsForNewNodes:
    - turnOnSSLForNodes:
        nodesToEnableSSL: ${event.response.nodes.join(id,)}

  checkAppVersion:
    - cmd[${this.masternode}]: |-
        source /etc/jelastic/metainf.conf
        if [ "x$COMPUTE_TYPE" == "xpostgres" ] ; then
            [ -f /root/check_app.sh ] && rm -f /root/check_app.sh;
            wget -O /root/check_app.sh ${baseUrl}/scripts/check_app.sh?_r=${fn.random};
            bash /root/check_app.sh;
        fi
      user: root
      
  getPostgresPasswd:
    - cmd[${this.masternode}]: |-
        source /etc/jelastic/metainf.conf
        if [ "x$COMPUTE_TYPE" == "xpostgres" ] ; then
            if [ -f /usr/local/sbin/jcm ]; then
                jcm getPswd
            else
                true
            fi
        fi

  fixCertOwnPerm:
    - cmd[${targetNodes.nodeGroup}]: |-
        chown -R postgres:postgres ${globals.certFolder}
      user: root
        
  turnOnSSLForNodes:
    - generateCerts: 
        affectedNodes: ${this.nodesToEnableSSL}
    - enableSSL:
        affectedNodes: ${this.nodesToEnableSSL}
